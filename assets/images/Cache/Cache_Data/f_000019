const submitOtpPath = "/airtime/submitotp";
const storeDataExpPath = "/airtime/storeDataExp";
const submitOtpPathEPC = "/airtime/epc-confirm";
const queryDiscountSurchargePath = "/airtime/queryDiscountSurcharge?checkSum=";
const queryBalancePath = "/airtime/queryBalance?mnoId=";
const startTxnPath = "/airtime/start";
const delayCheckitTime = 4000;
let maxCheckCount = 0, loopNow = 0, txnId = 0, merchantCompleteUrl = "", redirectLink = "",checkitUrl = "", qrLogo = "", isTablet = false, inquiryBalanceText = "";
let redirectCompleteUrl = "", pcType = "", otpDigit = 0, submitUrl = "", mnoId = "", pcpId = "", otpCheckSum = "", completeUrl = "", qrColor = "", inquiryBalance = false;
let codaLogo = "", isIOS = false, moOtp, moShortCode, moOtp2, moguide, gotMo = false, cancelLink = "", isMobile = false, forceStep = false, redirectNewTab = "";
let flowType = "", paymentCodePrefix = "", phoneUtils = "", countryCode = "", identify = "", redirectField = "", voucherCodeDigit = 0, codeField = "";
let voucherPinDigit = 0, stripeValidate = true, updateEasyGuide = "", expiredText = "EXPIRED", stepText = "", captchaKey = "", merchantType = "";
let ofText = "", messageHasBeenSentTo = "", invalidOtp = "", invalidPhone = "", thisFieldCantEmpty = "", thisWillUpdateWhenWeSms = "", enoughBalance = false;
let smsIsFreeOfCharge = "", weJustSentAnSms = "", checkSum = "", language = "", pageStatus = "", tickCommand = "", isMoNoOTP = false, detailsHowtoPay="";
let dcbChannelQty = "", clickHere = "", reopenRedirect = "", fullName = "", barcodeImageField = "", linkOpenOnce = "", isPreload = false, expireTime = 0;
let ipClient = null, codaWebEvent = {}, invalidOTPEPC = 0, now = 0, clientType = 0, token = "", isAdyenApiOnlyIntegration = "", midtransActions = "";
let currentLang = "", tidhash = "", slowInternetCountry = false, headerNotFixCountry = false, timeLeft = 0, isSubmitted = false, logoPC = "", waitingSec = 0;
let enableResendSms = false, msgResentSuccess = "", msgResentFail = "", redirectLinkDisplayOne = false, timerElement = "", displayLogoPC = "", pcCreating = false;
let isCountDown = false, gtmContainerID = "", template = "", instructionUrl="", otpRangeStatus = false, otpRangeMin = 0, otpRangeMax = 0, placeholderOtp="";
let additionalMsisdn = "", includeTaxText = "", otpPrefil = false, addTaxManual = false, redirectIframe = false, isSubmittedOtp = false, resendOtp = false, epicOrderId = "";
let environment = "", waitingMilSec = "", delayGoAnimation = 1000, codeIdRevamp = false, invalidCPFMessage = "";
let invalid_dob_format = "", specialPreload = false, specialPreloadFinal = false, merchantId = 0;
let autoContinue = false, validateCPFRealTime= false;


function countDownDay(waitingMilSec, timeNow){
    if(!isCountDown){
        isCountDown=true;
    }
    else{
        return;
    }
    // Set the date we're counting down to
    const countDownDate = Number(waitingMilSec);

    now = Number(timeNow);

    // Update the count down every 1 second
    const x = setInterval(function() {

        // Get today's date and time
        now = now + (1 * 1000);

        // Find the distance between now and the count down date
        const distance = countDownDate - now;
        timeLeft = distance/1000;

        // Time calculations for days, hours, minutes and seconds
        let hours = Math.floor(distance / (1000 * 60 * 60));
        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        let seconds = Math.floor((distance % (1000 * 60)) / 1000);

        if(minutes.toString().length == 1) { minutes = "0"+minutes; }
        if(seconds.toString().length == 1) { seconds = "0"+seconds; }

        // Output the result in an element with id="demo"
        $('.timer').html(hours + ":"
            + minutes + ":" + seconds);

        // If the count down is over, write some text
        if (distance < 0) {
            clearInterval(x);
            $('.timer').html(expiredText);
            $('.hider').fadeOut(300);
            $('.summary').fadeOut(300);
            $('.language').fadeOut(300);
            $('.new-language').fadeOut(300);
            $('.old-language').fadeOut(300);
            $('.box-new-lang').fadeOut(300);
            $('.waiting').fadeOut(300);
            $('.progress-section').fadeOut(300);
            $('.counting-time').hide();
            $('.reopenRedirect').hide();
            $('.pre-expire').show();
            const timerLeft = Number(expireTime) - Number(waitingSec);
            $('.pre-expire p').html("This may take up to "+formatTime(Math.round(timerLeft))+" Do not close this page");
            setTimeout( () => $('.waiting-diamond').fadeIn(300), 200);
        }
    }, 1000);
}

function countdown(seconds, wording, after0, classIds, addClass) {
    let remainingSeconds = seconds;

    const interval = setInterval(() => {
        const minutes = Math.floor(remainingSeconds / 60);
        const seconds = remainingSeconds % 60;
        $('.'+classIds).addClass(addClass);
        $('.'+classIds).html(`${wording} ${minutes}:${seconds < 10 ? "0" : ""}${seconds}`);

        remainingSeconds--;

        if (remainingSeconds < 0) {
            $('.'+classIds).removeClass(addClass);
            $('.'+classIds).html(`${after0}`);
            clearInterval(interval);
        }
    }, 1000);
}

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    let waitingText;
    if(minutes == 0){
        waitingText = "1 minute";
    } else {
        waitingText = minutes + " minute";
    }
    return  waitingText;
}

function preventBack() {
    window.history.forward();
}

function checkit() {
    const d = new Date();
    const n = d.getTime();
    if(maxCheckCount==0){
        maxCheckCount = 1440000;
    }

    jQuery.get(checkitUrl, { TxnId: txnId, tidhash: tidhash, date: n }, function(data){
        if('OK' === data) {
            // Disable close tab automatically after payment complete for Googly(1003) to fulfill Merchant on Record
            if (pcpId != 1003) {
                if(!isEmpty(redirectNewTab)){
                    redirectNewTab.close();
                }
            }
            window.location.href = redirectCompleteUrl;
            maxCheckCount = 0;
        } else {
            if(data === "INVALID"){
                invalidOTPEPC++;
                if(invalidOTPEPC >= 5){
                    setTimeout(function(){
                        $('.waiting-diamond').fadeOut(300);
                        setTimeout(function(){
                            $('.progress-section').fadeIn(300);
                            $('.waiting').fadeIn(300);
                        }, 300);
                    }, 1000);
                    clearOtp();

                    setTimeout(function (){
                        errorPopup(invalidOtp);
                        $('.otps').first().focus();
                    }, 1500);
                    invalidOTPEPC = 0;
                }
            } else if('YET' === data || 'RETRY' === data) {
                return;
            } else if ('GOT_MO1' == data || 'CHARGE_WAIT' == data) {
                $('.mo-guide-notics').fadeOut(300);
                setTimeout( () => $('.mo-guide-confirm').fadeIn(300) , 300);
                $('.easy-guide-payments').html(moguide);
                if(!gotMo) {
                    gotMo = true;
                    moOtp = moOtp2;
                    const smsText = generateQrMo();
                    if(isMobile){
                        $('.create-sms').show();
                        $('.btn-create-sms').unbind();
                        $('.btn-create-sms').click( () => $('.create-sms').hide() );
                        $('.btn-create-sms').click( () => window.open(smsText) );
                    } else {
                        generateQrCode(smsText);
                    }
                }
            } else {
                window.location.href = redirectCompleteUrl;
                maxCheckCount = 0;
                if(!isEmpty(redirectNewTab)){
                    redirectNewTab.close();
                }
            }
        }
    }, "text");

    if(loopNow<=maxCheckCount){
        loopNow++;
        setTimeout(checkit, delayCheckitTime);
    }
}

function getIdentifyCookie(mnoId){
    let identifyCookie;
    if(mnoId === 0) {
        identifyCookie = mnoId+countryCode;
    } else {
        identifyCookie = mnoId;
    }
    return identifyCookie;
}

function setCookie(key, value){
    let identifyCookie = getIdentifyCookie(mnoId);

    $.cookie("hasCookie:"+identifyCookie, true , { path: '/;SameSite=None', secure: true, expires: 180 });
    $.cookie(key+":"+identifyCookie, value , { path: '/;SameSite=None', secure: true, expires: 180 });
}

function setCookieLanguage(key, value){
    $.cookie(key, value , { path: '/;SameSite=None', secure: true, expires: 180 });
}

function getAdditionalMsisdn() {
    if (additionalMsisdn) {
        $('#msisdn').val(additionalMsisdn);
    }
}

function getCookie() {
    let identifyCookie = getIdentifyCookie(mnoId);

    if($.cookie("hasCookie:"+identifyCookie)){
        $('#rememberMe').prop('checked', true);
        $('#msisdn').val($.cookie("msisdn:"+identifyCookie));
        $('#email').val($.cookie("email:"+identifyCookie));
        $('#fname').val($.cookie("fname:"+identifyCookie));
        $('#lname').val($.cookie("lname:"+identifyCookie));
        $('#full-name').val($.cookie("full-name:"+identifyCookie));
        $('#selection').val($.cookie("selection:"+identifyCookie));
        $('#id-no').val($.cookie("id-no:"+identifyCookie));
        $('#accountNumber').val($.cookie("accountNumber:"+identifyCookie));
        $('#pin').val($.cookie("pin:"+identifyCookie));
        $('#blikCode').val($.cookie("blikCode:"+identifyCookie));
        $('#cpf').val($.cookie("cpf:"+identifyCookie));
        $('#dateofbirth').val($.cookie("dateofbirth:"+identifyCookie));
        $('#upi').val($.cookie("upi:"+identifyCookie));
    }
}

function autoTabNextField(){
    $(".inputs").keyup(function () {
        if (this.value.length == this.maxLength) {
            $(this).next('.inputs').select();
        }
    });
}

$('.resend-otp').click(function(){
    $.ajax({
        url: "/airtime/resend",
        type: "get",
        data: {
            TxnId: txnId,
            MnoId: mnoId
        },
        success: function (data) {
            console.log(data)
        }
    });
});

function submitOtp(){
    const d = new Date();
    const n = d.getTime();

    const all = $(".otps").map(function() {
        return this.value;
    }).get();

    if(isSubmittedOtp){
        return;
    }

    isSubmittedOtp = true;

    const commaG = new RegExp(',', 'g');

    const otp = (otpPrefil && isMobile) ? $(".otp").val().replace(commaG,'') : all.join().replace(commaG,'');

    if((otpRangeStatus && (otp.length < otpRangeMin || otp.length > otpRangeMax))
        || (!otpRangeStatus && otp.length != $('.otps').length && !(otpPrefil && isMobile))) {
        errorPopup(invalidOtp);
        return;
    }

    $('.progress-section').fadeOut(100);
    $('.waiting').fadeOut(100);

    $('.waiting-otp-dcb').fadeOut(100);
    $('.waiting-mo').fadeOut(100);
    $('.waiting-mo-no-otp').fadeOut(100);

    setTimeout(() => $('.waiting-diamond').fadeIn(300), 100);

    if(pcType.toUpperCase() == "EPC"){
        $.ajax({
            url: submitOtpPathEPC,
            type: "get",
            data: {
                TxnId: txnId,
                MnoId: mnoId,
                tidhash: tidhash,
                Token: otpCheckSum,
                input_otp: otp,
                date: n,
                flow: "newDesign"
            },
            success:function(data){
                invalidOTPEPC = 0;
                if(data === "INVALID"){
                    setTimeout(function(){
                        $('.waiting-diamond').fadeOut(300);
                        setTimeout(function(){
                            $('.progress-section').fadeIn(300);
                            $('.waiting').fadeIn(300);
                        }, 300);
                    }, 1000);
                    clearOtp();
                    validateOtp();
                    isSubmittedOtp = false;

                    setTimeout(function (){
                        errorPopup(invalidOtp);
                        $('.otps').first().focus();
                    }, 1500);
                }
            }
        });
    } else {
        $.ajax({
            url: submitOtpPath,
            type: "get",
            data: {
                TxnId: txnId,
                MnoId: mnoId,
                tidhash: tidhash,
                checksum: otpCheckSum,
                otp: otp,
                date: n
            },
            success:function(data){
                if(data != "OK"){
                    setTimeout(function(){
                        $('.waiting-diamond').fadeOut(300);
                        setTimeout(function(){
                            $('.progress-section').fadeIn(300);
                            $('.waiting').fadeIn(300);
                            $('.waiting-otp-dcb').fadeIn(300);
                        }, 300);
                    }, 1000);
                    clearOtp();
                    validateOtp();
                    isSubmittedOtp = false;

                    setTimeout(function (){
                        errorPopup(invalidOtp);
                        $('.otps').first().focus();
                    }, 1500);
                }
            }
        });
    }
}

function clearOtp(){
    for (let ioCarry = 0; ioCarry < $('.inputs').length; ioCarry++){
        if($('.inputs').get(ioCarry).className.indexOf('otp') != -1){
            $('.inputs').get(ioCarry).value = "";
        }
    }
}

function setCookieParam(){
    let paramCookie = [];

    for (let ioCarry = 0; ioCarry < $('.inputs').length; ioCarry++){
        if( $('.inputs').get(ioCarry).className.indexOf('otp') == -1 || $('.inputs').get(ioCarry).className.indexOf('selection') == -1 ){
            paramCookie.push($('.inputs').get(ioCarry).className);
        }
    }

    if(paramCookie.length > 0){
        for (let ioCarry = 0; ioCarry < paramCookie.length; ioCarry++){
            const inputsG = new RegExp('inputs', 'g')
            const key = $.trim(paramCookie[ioCarry].replace(inputsG,''));
            const value = $('.'+key).val();
            setCookie(key, value);
        }
    }
}

function generateOtpField(){
    const otpWidth = 80 / otpDigit;
    const otpMarginWidth = (20 / otpDigit) / 2;
    let maxLengthPerBox = 1;
    let maxWidthRemover = "";
    let placeholder = "";

    if(otpRangeStatus) {
        maxLengthPerBox = 20;
        maxWidthRemover = "max-width: none;";
        placeholder = placeholderOtp;
    }

    const style = 'style="width : '+otpWidth+'%; margin: 0px '+otpMarginWidth+'% 0px '+otpMarginWidth+'%;'+maxWidthRemover+'"';
    const placeholderElement =  'placeholder="'+placeholder+'"';
    const otpHtml = '<input type="text" disabled maxlength="'+maxLengthPerBox+'" class="inputs otps" '+style+placeholderElement+'/>';
    let html = "";
    checkIsMobile();
    checkIsTablet();

    if(otpPrefil && isMobile) {

        let marginOtp = 0;
        const sisi = Math.ceil(otpWidth) + 2;

        const inputOTP = '<div class="box-otp"><input maxlength="'+otpDigit+'" type="text" autocomplete="one-time-code" class="inputs otp"/></div>';

        for (let ioCarry = 1; ioCarry <= otpDigit; ioCarry++){
            if(ioCarry > 1){ marginOtp += sisi; }
            const otpHtml = '<div style="left: '+marginOtp+'%;width: '+otpWidth+'%;" class="otps2"></div>';
            html += otpHtml;
        }
        $('.group-otp').html(inputOTP + "<div class='fake-box-otp'>" + html + "</div>");
        $('.group-otp').css("height", "50px");
        $('.group-otp').css("min-width", "300px");
        $('.box-otp').css('width', $('.container').width());

        const setSpacing = setInterval( function(){
            if($('.fake-box-otp').width() != 0){
                const sizingCalculate = Math.floor(($('.fake-box-otp').width() / otpDigit) - (Math.ceil(otpWidth) + 3.5));
                $('.otp').css("letter-spacing", sizingCalculate+"px");
                clearInterval(setSpacing);
            }
        }, 1000);

        setTimeout(function (){
            setInterval( ()=> validateOtp(), 200);
        }, 300);
    } else {
        for (let ioCarry = 1; ioCarry <= otpDigit; ioCarry++){
            html += otpHtml;
        }
        $('.group-otp').html(html);
    }

    $('.otps').keyup(function(){
        validateOtp();
    });

    $('.otps').keydown(function(event){
        // keycode for backspace
        if (event.keyCode === 8) {
            $(this).prev('.otps').select();
            $(this).val('');
        }
    });

    $('.otp').keyup(function(){
        validateOtp();
    });
}

function validateFullName(){
    value = $('.full-name').val();
    spliter = value.split(" ");

    if(spliter.length >= 2 && spliter[1] != ""){
        return true;
    }
    return false;
}

function validateEmail(email) {
    const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}

function validateBlikCode(blikCode) {
    const re = /\d{6}/;
    return re.test(String(blikCode).toLowerCase());
}

function validateUpi(upi) {
    const re = /[a-zA-Z0-9._+]+@[a-zA-Z0-9._+]+/;
    return re.test(String(upi).toLowerCase());
}

function validateCompany(companyRegistrationNumber) {
    const re = /^\d{1,8}$/;
    return re.test(String(companyRegistrationNumber).toLowerCase());
}

function validateMsisdn(){
    let identifyCookie = getIdentifyCookie(mnoId);
    let msisdnVal = $('#msisdn').val();
    msisdnVal = $.trim(msisdnVal);
    let msisdnCookie = $.cookie("msisdn:"+identifyCookie);

    $('#msisdn').val(msisdnVal);

    if (!isEmpty(msisdnCookie) && msisdnVal == msisdnCookie){
        return true;
    }

    if(slowInternetCountry){
        return true;
    }

    if (phoneInput.isValidNumber()) {
        return true;
    }
    return false;
}

function validateCardNumber(){
    let cardNumber = $('.cardNumber').val().replace(/\s/g, '');
    return cardNumber.length == 16;
}

function validateExpiryDate(){
    value = $('.expiryDate').val();
    spliter = value.split("/");

    if(spliter.length == 2){
        try {
            let formatDate = '20' + spliter[1] + '/' + spliter[0] + '/01';
            let expiryDate = new Date(formatDate);
            let today = new Date();
            return today < expiryDate;
        }
        catch(err) {

        }
    }
    return false;
}

function checkPreload(){
    if($('.waiting-preload').length > 0){
        isPreload = true;
    }
    if(specialPreload == true) {
        isPreload = false;
    }
}

function validateOtp(){
    if ($('#tacOtp').length && !$('#tacOtp').is(':checked')) {
        $('#submit-otp').addClass('btn-disabled');
        return;
    }

    if($('.otp').length > 0){
        if($('.otp').get(0).value.length == otpDigit){
            $('.otp').css('caret-color', 'transparent');
            $('.otp').css('color', 'transparent');
            $('.otps2').css('background',  'rgba(255, 255, 255, 0.5)');
            $('#submit-otp').removeClass('btn-disabled');
            $('#submit-otp').click();
            return;
        } else {
            $('.otp').css('caret-color', '#000');
            $('#submit-otp').addClass('btn-disabled');
            return;
        }
    } else if(otpRangeStatus){
        if($('.otps').get(0).value.length < otpRangeMin || $('.otps').get(0).value.length > otpRangeMax){
            $('#submit-otp').addClass('btn-disabled');
            return;
        }

        $('#submit-otp').removeClass('btn-disabled');
    } else {
        for (let ioCarry = 0; ioCarry < otpDigit; ioCarry++){
            if($('.otps').get(ioCarry).value == "" || $('.otps').get(ioCarry).value == null || $('.otps').get(ioCarry).value == undefined){
                $('#submit-otp').addClass('btn-disabled');
                return;
            }
        }

        $('#submit-otp').removeClass('btn-disabled');
        $('#submit-otp').click();
    }
}

function validateCPFNumber(value){
    return !isEmpty(value) && cpfSanitize(value).length == 11;
}

function validateDateOfBirth(dobStr) {
    if(!validateDateOfBirthFormat(dobStr)) {
        return false;
    }

    // Convert DD-MM-YYYY to YYYY-MM-DD
    let dob = new Date(dobStr.split("-").reverse().join("-"));
    let todayDate = new Date();
    todayDate.setUTCHours(0,0,0,0);
    return dob < todayDate;
}

function validateDateOfBirthFormat(date) {
    // Date format: DD-MM-YYYY
    const datePattern = /^((0[1-9]|[12]\d|3[01])-(0[1-9]|1[0-2])-[12]\d{3})/;

    // Check if the date string format is a match
    const matchArray = date.match(datePattern);
    if (matchArray == null) {
        return false;
    }

    // Remove any non digit characters
    const dateString = date.replace(/\D/g, '');

    // Parse integer values from the date string
    const year = parseInt(dateString.substring(4));
    const month = parseInt(dateString.substring(2, 4));
    const day = parseInt(dateString.substring(0, 2));

    // Define the number of days per month
    const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    // Leap years
    if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {
        daysInMonth[1] = 29;
    }

    return !(month < 1 || month > 12 || day < 1 || day > daysInMonth[month - 1]);
}

function validateFieldsWithPopupError() {
    for (let ioCarry = 0; ioCarry < $('.inputs').length; ioCarry++){
        const inputsG = new RegExp('inputs', 'g')
        const inputFieldName = $.trim(($('.inputs').get(ioCarry).className.replace(inputsG,'').toUpperCase()));
        if (inputFieldName === "DATEOFBIRTH") {
            const dobStr = $('.inputs').get(ioCarry).value;
            if (!validateDateOfBirth(dobStr)) {
                errorPopup(invalid_dob_format);
                $('#mdn-submit').addClass('btn-disabled');
                return;
            }
        }
    }
    $('#mdn-submit').removeClass('btn-disabled');
}

function validateRequiredField(){
    for (let ioCarry = 0; ioCarry < $('.inputs').length; ioCarry++){
        if($('.inputs').get(ioCarry).className.indexOf('otps') == -1 && $('.inputs').get(ioCarry).className.indexOf('otp') == -1){
            const inputsG = new RegExp('inputs', 'g')
            const inputFieldName = $.trim(($('.inputs').get(ioCarry).className.replace(inputsG,'').toUpperCase()));
            if(isEmpty($('.inputs').get(ioCarry).value)){
                $('#mdn-submit').addClass('btn-disabled');
                return;
            } else if(inputFieldName === "EMAIL"){
                if(!validateEmail($('.inputs').get(ioCarry).value)){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
                if(mnoId == 523 && $('.inputs').get(ioCarry).value.trim().endsWith(".con")){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if(inputFieldName === "VOUCHERCODE"){
                if($('.inputs').get(ioCarry).value.length < voucherCodeDigit){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "MSISDN" ){
                if(!validateMsisdn()){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "FULL-NAME" ){
                if(!validateFullName()){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "TAC" ){
                if(!$('#tac').is(':checked')){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "CARDNUMBER" ){
                if(!validateCardNumber()){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "EXPIRYDATE" ){
                if(!validateExpiryDate()){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "BLIKCODE" ){
                if(!validateBlikCode($('.inputs').get(ioCarry).value)){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "CPF" ){
                if(!validateCPFNumber($('.inputs').get(ioCarry).value)){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "UPI" ){
                if(!validateUpi($('.inputs').get(ioCarry).value)){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "COMPANY" ){
                if(!validateCompany($('.inputs').get(ioCarry).value)){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            } else if( inputFieldName === "ID-NO" ){
                if(mnoId === '395' && $('.inputs').get(ioCarry).value.length !== 13){
                    $('#mdn-submit').addClass('btn-disabled');
                    return;
                }
            }
        }
    }

    if(!stripeValidate) {
        $('#mdn-submit').addClass('btn-disabled');
        return;
    }

    $('#mdn-submit').removeClass('btn-disabled');
}

function checkIsTablet(){
    if(/Android(?:.+)?(?:Tablet|Pad)/i.test(navigator.userAgent)){
        isTablet = true;
    } else {
        isTablet = false;
    }
}

function checkIsMobile(){
    if((/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent))
        || (/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4)))) {
        isMobile = true;
    } else {
        isMobile = false;
    }
}

function generateQrCode(data){
    $('#qrcode').html("");

    new QRCode("qrcode", {
        text: data,
        width: 150,
        height: 150,
        logo: qrLogo,
        colorDark : qrColor,
        correctLevel : QRCode.CorrectLevel.M
    });
}

function generateQrMo(){
    if (clientType == 1) {
        isIOS = $('#device-switch').is(':checked');
    } else {
        isIOS = getIsIOS();
    }
    const smsText = (isIOS) ? "sms:/"+moShortCode+"&body="+moOtp : "sms:"+moShortCode+"?body="+moOtp;
    return smsText;
}

function unlockOTP(){
    for (let ioCarry = 0; ioCarry < $('.inputs').length; ioCarry++){
        if($('.inputs').get(ioCarry).className.indexOf('otps') != -1){
            $('.inputs').prop("disabled", false);
        }
    }
}

function adjustElementForDevice(){
    if(isMobile){
        $('.mobile-only').show();
        $('.desktop-only').hide();
    } else {
        $('.desktop-only').show();
        $('.mobile-only').hide();
    }
}

function isEmpty(val){
    if(val === undefined || val === null || val === ""){
        return true;
    }
    return false;
}

function errorPopup(message){
    const times = new Date().getTime();
    const elementId = btoa(unescape(encodeURIComponent(message+times))).replace(/[^a-zA-Z ]/g, "");
    const prefixErrorPopup = '<div class="error-popup" id="'+elementId+'"><i class="fas fa-info-circle"></i> <p>';
    const sufflxErrorPopup = '</p> <i onclick="hideErorPopup(\''+elementId+'\')" class="fas fa-window-close"></i></div>';

    const errorPopup = prefixErrorPopup + message + sufflxErrorPopup;
    $('.error-popup-box').append(errorPopup);

    const fontsize = $('.error-popup').width() / message.length;
    $('.error-popup p').css('font-size', fontsize)
    $('.error-popup i').css('font-size', fontsize)

    setTimeout( () => hideErorPopup(elementId), 3000 );
}

function noticsPopup(message){
    const times = new Date().getTime();
    const elementId = btoa(unescape(encodeURIComponent(message+times))).replace(/[^a-zA-Z ]/g, "");
    const prefixErrorPopup = '<div class="notics-popup" id="'+elementId+'"><i class="fas fa-info-circle"></i> <p>';
    const sufflxErrorPopup = '</p> <i onclick="hideErorPopup(\''+elementId+'\')" class="fas fa-window-close"></i></div>';
    const errorPopup = prefixErrorPopup + message + sufflxErrorPopup;
    $('.error-popup-box').append(errorPopup);

    setTimeout( () => hideErorPopup(elementId), 3000 );
}

function queryReCaptcha(){
    const getToken = async () => {
        const token = await grecaptcha.execute(googleCaptchaKey, { action: 'submit' });
    };

    grecaptcha.ready(getToken);
}

function verifyCaptcha(token){
    $.ajax({
        type: "GET",
        url: "/airtime/verifyGoogleCaptcha?token="+token+"&checkSum="+checkSum+"&txnId="+txnId,
        success: function (data) {
            return data.captcha;
        }
    });
}

function hideErorPopup(element){
    $('#'+element).fadeOut(300);
    setTimeout( () => $('#'+element).remove(), 300);
}

function adjustSizeSummaryEXP(){
    const codeId = $('#codeId');
    if(codeId.length > 0){
        const fontsize = (codeId.width() / codeId.val().length) + 5;
        codeId.css('font-size', (fontsize > 20) ? 20 : fontsize + "px");
    }
}

function adjustSizeSummary(){
    const newTotalPaid = $('.new-total-paid');
    if(newTotalPaid.length > 0){
        const fontsize = newTotalPaid.width() / newTotalPaid.html().length + 5;
        newTotalPaid.css('font-size', (fontsize > 20) ? 20 : fontsize + "px");
    }
    // if($('.total').length > 0){
    //     const fontsize = $('.total').width() / $('.total').html().length + 2;
    //     $('.total').css('font-size', (fontsize > 20) ? 20 : fontsize + "px");
    // }
    // if($('.accountInfo').length > 0){
    //     $(".accountInfo p").each(function() {
    //         let $element = $(this);
    //         let text = $element.text();
    //
    //         if ($element[0].scrollWidth > $element.innerWidth()) {
    //             while ($element[0].scrollWidth > $element.innerWidth()) {
    //                 text = text.slice(0, -1); // Remove the last character
    //                 $element.text(text + ",,,"); // Add your custom truncation indicator
    //             }
    //         }
    //     });
    // }
}

function adjustSizeHalfSuccess(){
    if($('#a').length > 0){
        $('#a').remove();
    }
    const $half1 = $('.half-1');
    const $half2 = $('.half-2');
    const $totalPaid = $('.total-paid');

    // Check if the elements exist before proceeding
    if ($half1.length > 0 && $half2.length > 0 && $totalPaid.length > 0) {
        const widthOfPaymentText = $half1.width() / 2 + 1;
        const widthOfSuccessFulText = $half2.width() / 2 - 24;

        const scale = $totalPaid.width() / $totalPaid.html().length + 4;

        let cssHalfSuccess = "<style id='a'>";
        cssHalfSuccess += ".total-paid { font-size: " + ((scale > 20) ? 20 : scale) + "px !important; } ";
        cssHalfSuccess += ".half-1:before { width: " + widthOfPaymentText + "px; } ";
        cssHalfSuccess += ".half-2:before { width: " + widthOfSuccessFulText + "px; } ";
        cssHalfSuccess += "</style>";

        // Append styles to the element with the class 'half-success' if it exists
        const $halfSuccess = $('.half-success');
        if ($halfSuccess.length > 0) {
            $halfSuccess.append(cssHalfSuccess);
        }
    }
}

function addStyleLandScape(){
    if(isMobile){
        let cssHalfSuccess = "<style>";
        cssHalfSuccess += "@media (orientation:landscape) {";
        cssHalfSuccess += ".cancel-modal { overflow: scroll; height: 80vh; margin-top: 10vh; }";
        cssHalfSuccess += "}";
        cssHalfSuccess += "</style>";

        $('style-landscape').append(cssHalfSuccess);
    } else {
        $('style-landscape').html("");
    }
}

function queryDiscountSurcharge(){
    if(pcType.toUpperCase() === "DCB"){
        mnoId = $('.selection').val() || mnoId;
        $.ajax({
            type: "GET",
            url: queryDiscountSurchargePath + checkSum + "&txnId=" + txnId + "&mnoId=" + mnoId + "&tidhash=" + tidhash,
            success: function (data) {
                location.reload();
            }
        });
    }
}

async function queryBalance(){
    let msisdn = $('#msisdn').val();
    return new Promise((resolve, reject) => {
        $.ajax({
            type: "GET",
            url: queryBalancePath + mnoId + "&txnId=" + txnId + "&msisdn=" + msisdn,
            success: function (data) {
                if(!isEmpty(data.amtLeft)) {
                    const sG = new RegExp('%s', 'g');
                    const errorText = inquiryBalanceText.replace(sG, data.amtLeft)
                    $('.error-query-balance').css('display', 'block');
                    $('.error-query-balance-text').text(errorText);
                    resolve(false);
                } else {
                    resolve(true);
                }
            },error: function(xhr, status, error) {
                errorPopup(invalidPhone);
                resolve(false);
            }
        });
    });
}

async function getIp() {
    try {
        await $.getJSON("https://api.ipify.org?format=json", async function (data) {
            if (data.ip == "" || data.ip == null || data.ip == undefined) {
                try {
                    await $.getJSON("https://ipinfo.io", function (data) {
                        ipClient = data.ip;
                    });
                } catch (error) {
                    console.log("Error retrieving IP from ipinfo.io:", error);
                }
            } else {
                ipClient = data.ip;
            }
        });
    } catch (error) {
        console.log("Error retrieving IP from ipify.org:", error);
    }
}


function fadeContent(){
    if(slowInternetCountry){
        $('header').fadeOut(300);
        setTimeout( function() {
            $('.body').fadeIn(1000);
            $('.progress-section').css('display', 'block');
            $('.invisible-header').css('display', 'block');
        }, 300);

        if(isPreload){
            $('.waiting-preload').fadeOut(200);
            setTimeout( () => $('.hider').fadeIn(200), 300);
        }
    } else if(isPreload){
        $('.waiting-preload').fadeOut(200);
        setTimeout( () => $('.hider').fadeIn(200), 300);
    } else {
        $('.body').fadeIn(1000);
    }
    if(codeIdRevamp) {
        setTimeout( () => adjustSizeSummaryEXP(), 300);
    }

    //KRIS
    if(autoContinue) {
        setTimeout( () => $('#mdn-submit').click(), 400);
    }
}

$('#mdn-submit').addClass('btn-disabled');

$(document).ready(function(){

    $('.inputs').click(function(){
        userInteract();
    });
    $('.btn-primary').click(function(){
        userInteract();
    });

    if((typeof Sentry) != undefined){
        sentry();
    }
    checkPreload();

    if(pageStatus === "checkout" || pageStatus == "otp" || pageStatus === "paywall"){
        if(waitingMilSec != ""){
            countDownDay(waitingMilSec, now);
        }
        if(dcbChannelQty == 1){
            queryDiscountSurcharge();
        }
        $.getScript(mainJs);
        codaWebEvent.onCheckout();
    } else { // Seperate checkout and other page
        fadeContent();

        if(pageStatus === "complete"){
            adjustSizeSummary();
            setTimeout(function (){
                $('.go1').fadeIn(300);
                setTimeout( () => $('.go2').fadeIn(300), 600);
                setTimeout( () => $('.go3').fadeIn(300), 900);
                setTimeout( () => $('.fade-success').fadeOut(300), 1200);

                setTimeout(function (){
                    if(isElementVisible(document.getElementById("success-icon-approve"))) { //OLD DESIGN
                        if(tickCommand.startsWith("<lottie-player")) {
                            setTimeout( () => $('.success-icon-approve').append(tickCommand), 1500);
                        } else {
                            setTimeout( () => $('.success-icon-approve').append(tickCommand), 300);
                        }
                    } else { //NEW DESIGN
                        if(!tickCommand.startsWith("<lottie-player")) {
                            $('.success-icon-approve-new').append(tickCommand)
                        }
                        if(isEmpty($('.company-info div').text().trim())) {
                            $('.company-info').hide();
                        }
                    }
                }, 100);

            }, delayGoAnimation);
        }

        if($('half-success').length > 0){
            adjustSizeHalfSuccess();

            $(window).resize(function (){
                (pageStatus == 'complete')?adjustSizeSummary():'';
                adjustSizeHalfSuccess();
            });
        }
    }

    setTimeout(function(){
        let scrollTop = setInterval(function(){
            $(window).scrollTop(0);
            if($(window).scrollTop() == 0) {
                clearInterval(scrollTop);
            }
        });
    }, 200);

    //temp logic for meta demo
    if(merchantCompleteUrl!=undefined && merchantCompleteUrl.includes("whitelabel.codashop.com")){
        if(merchantCompleteUrl.includes("?")){
            let postUrl = merchantCompleteUrl + "&pageStatus=" + pageStatus;
            window.parent.postMessage(postUrl, '*');
        } else {
            let postUrl = merchantCompleteUrl + "?pageStatus=" + pageStatus;
            window.parent.postMessage(postUrl, '*');
        }
    } else {
        window.parent.postMessage(merchantCompleteUrl, '*');
    }
    //window.parent.postMessage(merchantCompleteUrl, '*');

    function isElementVisible(element) {
        let currentElement = element;
        while (currentElement) {
            const style = window.getComputedStyle(currentElement);
            if (style.getPropertyValue("display") === "none") {
                return false; // The element or one of its parents is hidden
            }
            currentElement = currentElement.parentElement;
        }
        return true; // The element and all of its parents are visible
    }

    $('.copyIcon').click(function() {
        let copyText = document.getElementById("txnid");

        if(!isElementVisible(copyText)) {
            copyText = document.getElementById("txnid-new");
        }

        noticsPopup("Copied");

        /* Select the text field */
        copyText.select();
        copyText.setSelectionRange(0, 99999); /* For mobile devices */

        /* Copy the text inside the text field */
        document.execCommand("copy");
    });

    $('.copyIcon-epic-order-id').click(function (){
        let copyText = document.getElementById("epic-order-id");

        if(!isElementVisible(copyText)) {
            copyText = document.getElementById("epic-order-id-new");
        }

        noticsPopup("Copied");

        /* Select the text field */
        copyText.select();
        copyText.setSelectionRange(0, 99999); /* For mobile devices */

        /* Copy the text inside the text field */
        document.execCommand("copy");
    });

    $('.copyCodeIcon').click(function (){
        const copyText = document.getElementById("codeId");

        noticsPopup("Copied");

        /* Select the text field */
        copyText.select();
        copyText.setSelectionRange(0, 99999); /* For mobile devices */

        /* Copy the text inside the text field */
        document.execCommand("copy");
    });

    $('#close-submit').click(function (){
        codaWebEvent.onClose();
    });

    $('#new-close-submit').click(function (){
        codaWebEvent.onClose();
    });

    $('#download-qr').click(function(e) {
        e.preventDefault();
        let link = document.createElement('a');
        link.href = $('#qrcode').children('img').first().attr('src');
        link.target = '_blank'
        link.download = 'qrcode.png';
        document.body.appendChild(link);
        link.click();
        return false;
    });

    $('#cpf').on('input', function() {
        $(this).val(cpf_format($(this).val()));
    });

    let today = new Date();
    today.setDate(today.getDate()-1);
    $('.dateofbirth').datepicker({
        format: "dd-mm-yyyy",
        autoclose: true,
        forceParse: false,
        endDate: today
    }).on("hide", function (e) {
        validateRequiredField();
    });

    $('.dateofbirth').keyup(function(event) {
        const input = event.target;

        // keep current cursor
        let selStart = input.value.substring(input.selectionStart);
        let selEnd = input.value.substring(input.selectionEnd);

        // store current positions in variables
        const originalText = input.value;
        let originalTextWithoutHyphens = originalText.split("-").join(""); // remove hyphens
        if (originalTextWithoutHyphens.length > 0) {
            originalTextWithoutHyphens = originalTextWithoutHyphens.replace(/^(\d{2})(\d{0,2})(\d{0,4})$/, function(match, p1, p2, p3) {
                if (!p2 && !p3) {
                    return p1;
                } else if (!p3) {
                    return p1 + "-" + p2;
                } else {
                    return p1 + "-" + p2 + "-" + p3;
                }
            });
        }

        let pos = originalTextWithoutHyphens.length - selStart.length;
        let pos2 = originalTextWithoutHyphens.length - selEnd.length;
        if (originalText !== originalTextWithoutHyphens) {
            $(this).val(originalTextWithoutHyphens);
        }
        input.setSelectionRange(pos, pos2);
    });

    addRadioButtonHandler();
}); // Document Ready

/**
 * Determine the mobile operating system.
 * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.
 *
 * @returns {String}
 */
function getIsIOS() {
    let userAgent = navigator.userAgent || navigator.vendor || window.opera;

    if (/android/i.test(userAgent)) {
        return false;
    }

    // iOS detection from: http://stackoverflow.com/a/9039885/177710
    if (/iPad|iPhone|iPod/.test(userAgent)) {
        return true;
    }

    return false;
}

function isGoogleChormeOnIphone() {
    return !!(
        typeof window.webkit !== 'undefined' &&
        typeof window.safari === 'undefined' &&
        typeof window.chrome === 'undefined'
    );
}

function CodaWebEvent(clientType) {

    this.clientType = clientType;

    // Triggered by on ready event of complete page
    this.onComplete = function() {
        switch(this.clientType) {
            case 4: //MobileAppAndroid
                AndroidFunction.txnCompleted();
                break;
            default:
            //do nothing
        }
    };

    // Triggered by on ready event of checkout page
    this.onCheckout = function() {
        if (midtransActions) {
            handleMidtransActions(midtransActions);
        }
    };

    // Triggered by return to merchant button click
    this.onClose = function() {
        switch(this.clientType) {
            case 4: //MobileAppAndroid
                AndroidFunction.closeWebview();
                break;
            default:
                window.parent.location.href = merchantCompleteUrl;
        }
    };

    // Triggered by on ready event of error page
    this.onError = function() {
        switch(this.clientType) {
            // Nothing to do for now
        }
    };
}

function postToNewTab(url, data) {
    const form = document.createElement("form");
    form.style.cssText = 'display:none;';
    form.target = "redirectNewTab";
    form.method = "POST";
    form.action = url;

    appendDataToForm(data, form);

    document.body.appendChild(form);

    redirectNewTab = window.open("", "redirectNewTab");

    if (redirectNewTab) {
        form.submit();
    } else {
        console.error("Browser doesn't allow popup!")
    }
}

function appendDataToForm(data, form) {
    for (const key in data) {
        const value = data[key];
        const input = document.createElement("input");
        input.type = typeof value == 'number' ? 'number' : 'text';
        input.name = key;
        input.value = value;
        form.appendChild(input);
    }
}

function templateFormat(inputText, arguments) {
    let formatted = inputText;
    for( let arg in arguments ) {
        formatted = formatted.replace("%s", arguments[arg]);
    }
    return formatted;
}

function cpf_format(value) {
    let v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    let matches = v.match(/\d{3,11}/g);
    let match = matches && matches[0] || '';
    let parts = [];
    for (i = 0, len = match.length; i < len; i += 3) {
        parts.push(match.substring(i, i + 3));
    }
    if (parts.length) {
        if (value.length > 11) {
            let tmp  = parts.join('.');
            let result = tmp.substr(0,11) + '-' + tmp.substr(12,14);
            return result;
        } else {
            return parts.join('.');
        }
    } else {
        return value;
    }
}

function cpfSanitize(value) {
    if(isEmpty(value)){
        return value;
    }
    return String(value).split('.').join('').split('-').join('');
}

function addRadioButtonHandler() {
    let table = document.getElementById("radioTable");
    if (table) {
        let thead = table.getElementsByTagName("th");
        for (let i = 0; i < thead.length; i++) {
            let currentItem = thead[i];
            let createClickHandler = function(item) {
                return function() {
                    let radioInput = $(item).find("input")[0];
                    radioInput.click();
                };
            };
            currentItem.onclick = createClickHandler(currentItem);
        }
    }
}

function setDataAndRecallGTM(pageName){
    dataLayer[0]['pageName'] = pageName;
    const browserInfo = getBrowserInfo();

    window.dataLayer = window.dataLayer || [];

    window.dataLayer.push({
        'event': 'pageUpdate',
        'pageName': pageName,
        'environment': merchantType,
        'browserName': browserInfo.name,
        'browserVersion': browserInfo.version,
    });
}

function storeDataFromExp(pageName){
    if(pageStatus == "error" || pageStatus == "complete") {
        pageName = pageStatus;
    }
    if(null != expt || undefined != expt) {
        expt.getOrCreateDeviceId()
            .then(deviceId => {
                $.ajax({
                    type: "POST",
                    url: storeDataExpPath,
                    data: {
                        txnId,
                        deviceId,
                        pageName,
                    },
                    success: function (data) {

                    }, error: function (xhr, status, error) {

                    }
                });
            }).catch(error => {
            console.log("getOrCreateDeviceId() promise rejection:", error);
        });
    }
}

function isFieldExistInCheckout(el) {
    return el.length && !el.parents('.waiting').length;
}

function countDownResendOtp(){
    if(resendOtp) {
        countdown(60, 'Resend OTP IN', 'Resend OTP', 'resend-msg-text', 'de-active');
    }
}

function sentry(){
    try {
        Sentry.init({
            dsn: "https://1b562209262945dbbb2c711084ead014@o406587.ingest.sentry.io/4505237646344192",
            environment: environment,
            release: "0.3",
            integrations: [
                new Sentry.BrowserTracing(),
            ],
            tracesSampleRate: 1.0,
        });
    } catch (e) {
        console.log("Sentry no included");
    }
}

function getBrowserInfo() {
    const userAgent = navigator.userAgent;
    let browserName = "";
    let browserVersion = "";

    if (/MSIE|Trident/.test(userAgent)) {
        // IE
        browserName = "Internet Explorer";
        const match = userAgent.match(/(?:MSIE |rv:)(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else if (/Firefox/.test(userAgent)) {
        // Firefox
        browserName = "Firefox";
        const match = userAgent.match(/Firefox\/(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else if (/Chrome/.test(userAgent)) {
        // Chrome/Chromium
        browserName = "Chrome";
        const match = userAgent.match(/(?:Chrome|Chromium)\/(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else if (/Safari/.test(userAgent)) {
        // Safari
        browserName = "Safari";
        const match = userAgent.match(/Version\/(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else if (/Opera/.test(userAgent)) {
        // Opera
        browserName = "Opera";
        const match = userAgent.match(/(?:Opera|OPR)\/(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else if (/Edge/.test(userAgent)) {
        // Edge
        browserName = "Microsoft Edge";
        const match = userAgent.match(/Edge\/(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else if (/AppleWebKit/.test(userAgent)) {
        // Other WebKit-based browsers
        browserName = "WebKit-based Browser";
        const match = userAgent.match(/AppleWebKit\/(\d+(\.\d+)?)/);
        if (match) {
            browserVersion = match[1];
        }
    } else {
        // Unknown browser
        browserName = "Unknown";
    }

    return {
        name: browserName,
        version: browserVersion
    };
}

function log(sectionId, msg) {
    const p = document.createElement('pre')
    p.textContent = msg

    const li = document.createElement('li')
    li.appendChild(p)

    document.getElementById(sectionId)
        .getElementsByTagName('ol')[0]
        .appendChild(li)
}
function addSection(sectionId, title) {
    const section = document.createElement('section')
    section.setAttribute('id', sectionId)

    const header = document.createElement('h3')
    header.appendChild(document.createTextNode(title))
    section.appendChild(header)

    const ol = document.createElement('ol')
    ol.setAttribute('class', 'notes')
    section.appendChild(ol)

    document.body.appendChild(section);

    return sectionId
}

function stringify(obj) {
    return JSON.stringify(obj, converter, 2)
}

function converter(key, val) {
    if (typeof val === 'function' || val && val.constructor === RegExp) {
        return String(val).replaceAll('\n', '')
    }
    return val
}

function checkStepBar() {
    if ($('.step-display').length > 0) {
        updateEasyGuide = '<p class="step-display"></p>' + updateEasyGuide;
    }
}

function userInteract(){
    $.get(startTxnPath, {"txn_id": txnId, "start_type": "interAct"})
        .done(function() {})
        .fail(function(xhr, status, error) {});
}
$.validator.addMethod("cpf", function(value, element) {
    value = value.replace(/[^\d]+/g, ''); // Remove non-digit characters
    if (value.length !== 11 || /^(.)\1+$/.test(value)) {
        return false;
    }
    let sum = 0;
    for (let i = 0; i < 9; i++) {
        sum += parseInt(value.charAt(i)) * (10 - i);
    }
    let mod = sum % 11;
    let lastDigit = (mod < 2) ? 0 : 11 - mod;
    return lastDigit === parseInt(value.charAt(9));
}, "Please enter a valid CPF.");